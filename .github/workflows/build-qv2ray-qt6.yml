name: Qv2ray build matrix - Qt6

on:
  push:
    branches-ignore:
      - l10n_dev
  release:
    types: [prereleased]
  workflow_dispatch:

jobs:
  check_commit_msg:
    outputs:
      commit_message: ${{ steps.get_message.outputs.message }}
    name: Check if the workflow has been disabled.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get commit message
        id: get_message
        run: |
          echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }} | tr '\n' ' ')"
          echo "message=\"$(git log --format=%B -n 1 ${{ github.event.after }} | tr '\n' ' ')\"" >> $GITHUB_ENV
  build:
    needs: check_commit_msg
    if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, '!QT6') }}
    strategy:
      matrix:
        ui_type: [QWidget]
        platform: [windows-latest]
        arch: [x64]
        build_type: [RelWithDebInfo, Release]
        qt_version: [6.4.2]
        include:
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    env:
      _QV2RAY_BUILD_INFO_: "Qv2ray built from Github Action"
      _QV2RAY_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: ${{ matrix.arch }}
      # =========================================================================================================
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.29
          arch: ${{ matrix.arch }}
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      # =========================================================================================================
      - name: Linux - ${{ matrix.qt_version }} - Build preparation - Install Packages
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libgl-dev libx11-dev libxkbcommon-x11-dev libxcb-image0-dev libxcb-icccm4-dev libssl-dev libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
          sudo apt install -y libprotobuf-dev protobuf-compiler protobuf-c-compiler libgrpc++-dev protobuf-compiler-grpc ninja-build fcitx-frontend-qt5 libcurl4-openssl-dev
      # --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages
        if: matrix.platform == 'macos-latest'
        run: |
          brew install protobuf grpc ninja pkg-config openssl
          git clone https://github.com/Qv2ray/macdeployqt-patched
          cd macdeployqt-patched
          mkdir build; cd build;
          cmake .. -DCMAKE_BUILD_TYPE=Release; cmake --build .
          cp -v ./macdeployqt ${Qt6_DIR}/bin/macdeployqt
      # --------------------------------------------------------
      - name: Win - ${{ matrix.arch }} - ${{ matrix.qt_version }} - Setup Ninja
        if: matrix.platform == 'windows-latest'
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.11.1
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
        shell: bash
        if: matrix.platform == 'windows-latest'
        run: |
          cd ./libs
          ./setup-libs.sh windows ${{ matrix.arch }}
      # ========================================================================================================= Generate MakeFile and Build
      - uses: actions/setup-node@v3
        if: matrix.platform == 'macos-latest'
        with:
          node-version: "16"
      - run: npm install -g appdmg
        if: matrix.platform == 'macos-latest'
      - name: macOS - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'macos-latest'
        env:
          PKG_CONFIG_PATH: /usr/local/opt/openssl@1.1/lib/pkgconfig
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DCMAKE_INSTALL_PREFIX=installed \
            -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
            -DQV2RAY_QT6=ON \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 \
            -DDS_STORE_SCRIPT=ON \
            -DQV2RAY_DEFAULT_VASSETS_PATH=/usr/local/opt/v2ray/share/v2ray \
            -DQV2RAY_DEFAULT_VCORE_PATH=/usr/local/opt/v2ray/bin/v2ray
          cmake --build . --parallel $(sysctl -n hw.logicalcpu)
          sudo cmake --install .
          appdmg ../assets/package_dmg.json ../Qv2ray.dmg
      # --------------------------------------------------------
      - name: Windows - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'windows-latest'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
            -DQV2RAY_QT6=ON \
            -DCMAKE_INSTALL_PREFIX=./deployment \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build . --parallel $(nproc)
          cmake --install .
          cp -v ./*.pdb ./deployment || true
      # --------------------------------------------------------
      - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
        if: matrix.platform == 'ubuntu-latest'
        shell: bash
        env:
          CC: /usr/bin/gcc-9
          CXX: /usr/bin/g++-9
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
            -DQV2RAY_QT6=ON \
            -DCMAKE_INSTALL_PREFIX=./AppDir/usr \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DQV2RAY_TRANSLATION_PATH=QApplication::applicationDirPath\(\)+"/../share/qv2ray/lang"
          cmake --build . --parallel $(nproc)
          cmake --install .
      # ========================================================================================================= Deployments
      - name: Linux - ${{ matrix.qt_version }} - Generating AppImage
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd build
          cd AppDir
          mkdir -p ./usr/{lib,optional}/
          mkdir -p ./usr/optional/libstdc++/
          mkdir -p ./usr/optional/libgcc_s/
          wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/AppRun-patched-x86_64 -O AppRun
          wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/exec-x86_64.so -O ./usr/optional/exec.so
          chmod a+x AppRun
          cp -fv /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ./usr/optional/libstdc++/
          cp -fv /lib/x86_64-linux-gnu/libgcc_s.so.1 ./usr/optional/libgcc_s/
          cp -fv /usr/lib/x86_64-linux-gnu/{libssl.so.1.1,libcrypto.so.1.1} ./usr/lib/
          cd ..
          wget https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage
          chmod +x ./linuxdeployqt-6-x86_64.AppImage
          ./linuxdeployqt-6-x86_64.AppImage AppDir/usr/share/applications/qv2ray.desktop \
            -unsupported-allow-new-glibc \
            -appimage \
            -no-strip \
            -always-overwrite \
            -extra-plugins=iconengines,imageformats,platforminputcontexts
          mv ./Qv2ray*.AppImage ./Qv2ray.AppImage
      - name: Linux - ${{ matrix.qt_version }} - Uploading Artifact
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Qv2ray-${{ github.sha }}.linux-${{ matrix.ui_type }}.qt${{ matrix.qt_version }}-${{ matrix.build_type }}.AppImage
          path: build/Qv2ray.AppImage
      - name: Linux - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: matrix.platform == 'ubuntu-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/Qv2ray.AppImage
          asset_name: Qv2ray.${{ steps.get_version.outputs.VERSION }}.Qt6.Linux-${{ matrix.ui_type }}-${{ matrix.build_type }}.AppImage
          tag: ${{ github.ref }}
          overwrite: true
      # --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Uploading Artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Qv2ray-${{ github.sha }}.macOS-${{ matrix.ui_type }}.qt${{ matrix.qt_version }}-${{ matrix.build_type }}.dmg
          path: Qv2ray.dmg
      - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: matrix.platform == 'macos-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: Qv2ray.dmg
          asset_name: Qv2ray.${{ steps.get_version.outputs.VERSION }}.Qt6.macOS-${{ matrix.ui_type }}-${{ matrix.build_type }}.dmg
          tag: ${{ github.ref }}
          overwrite: true
      # --------------------------------------------------------
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Create 7z Release
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./build/deployment/
          pathTarget: ./release.7z
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Uploading Artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: Qv2ray-${{ github.sha }}.Windows-${{ matrix.ui_type }}.qt${{ matrix.qt_version }}-${{ matrix.build_type }}.7z
          path: release.7z
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@2.2.1
        if: matrix.platform == 'windows-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release.7z
          asset_name: Qv2ray.${{ steps.get_version.outputs.VERSION }}.Qt6.Windows-${{ matrix.ui_type }}-${{ matrix.build_type }}.7z
          tag: ${{ github.ref }}
          overwrite: true
